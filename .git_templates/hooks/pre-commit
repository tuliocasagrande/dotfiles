#!/usr/bin/env python

# Thanks to:
# https://github.com/deniscostadsc/dotfiles/
# http://tech.yipit.com/2011/11/16/183772396/

import re
import subprocess
import sys

modified = re.compile('^[MA]\s+(?P<name>.*)$')

CHECKS = [
    {
        'output': 'Checking for [i]pdbs...',
        'command': 'grep -n "import i\?pdb" %s',
        'match_files': ['.*\.py$'],
        'print_filename': True,
    },
    {
        'output': 'Running flake8...',
        'command': 'flake8 --extend-ignore=E501 %s',
        'match_files': ['.*\.py$'],
        'print_filename': False,
    },
    # {
    #     'output': 'Checking for print calls...',
    #     'command': 'grep -n print %s',
    #     'match_files': ['.*\.py$'],
    #     'print_filename': True,
    # },
]


def matches_file(file_name, match_files):
    return any(
        re.compile(match_file).match(file_name) for match_file in match_files)


def check_files(files, check):
    result = 0
    print(check['output'])
    for file_name in files:
        if ('match_files' not in check or
                matches_file(file_name, check['match_files'])):

            if ('ignore_files' not in check or
                    not matches_file(file_name, check['ignore_files'])):
                process = subprocess.run(
                    check['command'] % file_name,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    encoding='utf-8',
                    shell=True)
                out = process.stdout
                err = process.stderr

                if out or err:
                    if check['print_filename']:
                        prefix = '\t%s:' % file_name
                    else:
                        prefix = '\t'
                    output_lines = [
                        '%s%s' % (prefix, line) for line in out.splitlines()]
                    print('\n'.join(output_lines))
                    if err:
                        print(err)
                    result = 1
    return result


def main():
    files = []

    p = subprocess.run(['git', 'status', '--porcelain'],
                       stdout=subprocess.PIPE, encoding='utf-8')
    out = p.stdout

    for line in out.splitlines():
        match = modified.match(line)
        if match:
            files.append(match.group('name'))

    result = 0
    for check in CHECKS:
        result = check_files(files, check) or result

    sys.exit(result)


if __name__ == '__main__':
    main()
