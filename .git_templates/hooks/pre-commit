#!/usr/bin/env python

# Thanks to:
# https://github.com/deniscostadsc/dotfiles/
# http://tech.yipit.com/2011/11/16/183772396/

import re
import subprocess
import sys

modified = re.compile(r"^[MA]\s+(?P<name>.*)$")

CHECKS = [
    {
        "prompt": "Checking for [i]pdbs...",
        "command": r'grep -Hn "import i\?pdb" {}',
        "match_files": [r".*\.py$"],
        "inverse_return_code": True,
    },
    # {
    #     "prompt": "Checking for print calls...",
    #     "command": "grep -Hn print {}",
    #     "match_files": [r".*\.py$"],
    #     "inverse_return_code": True,
    # },
    {
        "prompt": "Running flake8...",
        "command": "flake8 --extend-ignore=E203,E501 {}",
        "match_files": [r".*\.py$"],
        "inverse_return_code": False,
    },
    {
        "prompt": "Running black...",
        "command": "black --check -l 100 {}",
        "match_files": [r".*\.py$", r".*\.ipynb$"],
        "inverse_return_code": False,
    },
]


def matches_file(file_name, match_files):
    return any(re.compile(match_file).match(file_name) for match_file in match_files)


def check_files(files, check):
    result = 0
    print(check["prompt"])

    files = [
        file_name
        for file_name in files
        if "match_files" not in check or matches_file(file_name, check["match_files"])
    ]
    files = [
        file_name
        for file_name in files
        if "ignore_files" not in check or not matches_file(file_name, check["ignore_files"])
    ]
    files_str = " ".join(files)
    if files_str:
        process = subprocess.run(
            check["command"].format(files_str),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            encoding="utf-8",
            shell=True,
        )

        # Invert the return code for grep to be 0 for no matches (success) and 1 for matches (failure)
        return_code = process.returncode
        if check["inverse_return_code"]:
            return_code = not return_code

        if return_code != 0:
            stdout_lines = [f"\t{line}" for line in process.stdout.splitlines()]
            stderr_lines = [f"\t{line}" for line in process.stderr.splitlines()]
            output = "\n".join(stdout_lines + stderr_lines)
            print(output)
            result = 1

    return result


def main():
    files = []

    p = subprocess.run(["git", "status", "--porcelain"], stdout=subprocess.PIPE, encoding="utf-8")
    out = p.stdout

    for line in out.splitlines():
        match = modified.match(line)
        if match:
            files.append(match.group("name"))

    result = 0
    for check in CHECKS:
        result = check_files(files, check) or result

    sys.exit(result)


if __name__ == "__main__":
    main()
